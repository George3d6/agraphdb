#pragma once

#include <vector>
#include <memory>
#include <atomic>

#include <boost/algorithm/string/join.hpp>


/**
 * A Node is a structure which holds links to other node and some data
 * Currently nodes are not thread safe and must rely on being managed by a graph in a multi-threaded enviornment
 */
template<class InternalDataType>
class Node {
public:
    using TNode = Node<InternalDataType>;
    using sp = std::shared_ptr;
    using wp = std::weak_ptr;

    static std::string serialization_separator() { static std::string _r{"|"}; return _r; }
    static std::string serialization_link_list_separator() { static std::string _r{","}; return _r; }

    wp<TNode> self;
    //@TOTHINK: Should TNode be const here ?
    std::atomic<const sp<const std::vector<const sp<const TNode>>>> links{};
    //@WARNNING: Should be atomic shared pointer
    std::atomic<const sp<const InternalDataType>> internal_data{};
    uint64_t id;

    static sp<TNode> create(InternalDataType new_internal_data) {
        const sp<TNode> node_sp{new Node{new_internal_data}};
        node_sp->self = node_sp;
        return node_sp;
    }

    /// Returns a {meatadata, internal_data} pair where "metadata" holds logic information and deserialization information about the node
    /// and "internal_data" hold a serialization of the internal data held by the node
    //@TOTHINK: I assume this is always called whilst holding a sp to the node, otherwise horrible bug accessing nullptr. Maybe I shouldn't ?
    std::pair<std::string, std::string> serialize_node() const noexcept {
        auto temp_sp = self.lock();
        std::vector<std::string> links_id{};
        for(auto link : *links.load()) {
            links_id.push_back(std::to_string(link->id));
        }

        const std::string internal_data_serialization = internal_data.load()->serialize();
        return  std::make_pair(std::string{std::to_string(temp_sp->id) + TypedNode::serialization_separator()
                + boost::algorithm::join(links_id, TypedNode::serialization_link_list_separator())
                + TypedNode::serialization_separator() + std::to_string(internal_data_serialization.size())}
                , internal_data_serialization);

    }

    //@TOTHINK: Do we want access/getter methods ? Am I going down oop antipattern lane ?
    void set_data(InternalDataType * new_data) {
        internal_data.store(new_data);
    }

    auto get_data() {
        return internal_data.load();
    }

    /// Not 100% sure its thread safe... I think that unless I can make the if and load sequential it won't be
    void add_link(TNode* node) {
        while(true) {
            std::vector<const sp<const TNode>> old_links = (*links.load());
            old_links.push_back(node);
            auto new_links = std::make_shared<std::vector<const sp<const TNode>>>(old_links);
            if((*new_links.load).size() == (*links.load()).size() + 1) {
                links.load(new_links);
                return;
            }
        }
    }

    auto get_links() {
        return links.load();
    }


private:
    Node(InternalDataType new_internal_data): internal_data(std::make_shared<TNode>( (new_internal_data) ) ), id(uniq_id()) {}

    /// Get an id bigger than the last id by the value of the argument you pass, passing no argument increments by 1
    static uint64_t uniq_id(bool increment = 1) { static std::atomic<uint64_t> _uniq_id = 0; if (increment){ _uniq_id.fetch_add(increment); }}
};

/* Should this class still be 'a thing' ?
template<class InternalDataType>
class NodeContent {
public:
    std::vector<uint64_t> link_ids;
    InternalDataType internal_data;
    uint64_t id;

    NodeContent(const Node<InternalDataType> * const node): internal_data(node->internal_data), id(node->id) {
        for(const auto& node_sp : node->links) {
            link_ids.push_back(node_sp->id);
        }
    }

    NodeContent(const std::shared_ptr<const Node<InternalDataType>> node_sp): internal_data(node_sp->internal_data), id(node_sp->id) {
        for(const std::shared_ptr<const Node<InternalDataType>>& node_spi : node_sp->links) {
            link_ids.push_back(node_spi->id);
        }
    }
};
*/





